1. Intersection of two sets. Given two arrays a[] and b[], each containing n distinct 2D points in the plane, design a subquadratic algorithm to count the number of points that are contained both in array a[] and array b[].

1) Sort array b[] in O(nlogn) using modified comparator.
2) For each point a_i in a[] find its duplicate in sorted b[] with binary search in O(logn).
Total complexity = O(nlogn)

2. Permutation. Given two integer arrays of size nn, design a subquadratic algorithm to determine whether one is a permutation of the other. That is, do they contain exactly the same entries but, possibly, in a different order.

1) Sort each array in O(nlogn)
2) Check if they are equal in O(n)
Total complexity = O(nlogn)

3. Dutch national flag. Given an array of n buckets, each containing a red, white, or blue pebble, sort them by color. The allowed operations are:
*swap(i,j): swap the pebble in bucket ii with the pebble in bucket j.
*color(i): determine the color of the pebble in bucket i.
The performance requirements are as follows:
*At most nn calls to color().
*At most nn calls to swap().
*Constant extra space.

We traverse given array elements from left. We keep track of two pointers, first (called start in below code) to store next position of smaller element (smaller than range) from beginning; and second (called end in below code) to store next position of greater element from end.

The array is divided into four sections:
a[1..Lo-1] zeroes (red)
a[Lo..Mid-1] ones (white)
a[Mid..Hi] unknown
a[Hi+1..N] twos (blue)

And this is an invariant 

