See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (8 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 43 warnings)

Correctness:  47/49 tests passed
Memory:       16/22 tests passed
Timing:       100/125 tests passed

Aggregate score: 90.82%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
8.2K Oct 22 10:01 Board.java
7.1K Oct 22 10:01 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P DM_STRING_VOID_CTOR Dm: Creates the empty string using 'new String()'. Use the string literal "" instead.  At Board.java:[line 209]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'isSolvable()' is never called.  At Board.java:[lines 178-204]
M P SBSC_USE_STRINGBUFFER_CONCATENATION SBSC: Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string. Instead, use 'StringBuilder'.  At Board.java:[line 216]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Board.java:[line 161]
L D UC_USELESS_CONDITION UC: The condition 'ch == ' '' always produces the same result. Either something else was meant or the condition can be removed.  At Solver.java:[line 40]
L B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Solver.java:[line 171]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'Board$NeighborIterator' be refactored into a static nested class?  At Board.java:[lines 124-161]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'Solver$SolutionIterator' be refactored into a static nested class?  At Solver.java:[lines 157-171]
Warnings generated: 8


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:8: The private instance (or static) variable 'N' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:125: The private instance (or static) variable 'neighbors' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:175: Avoid unused private methods, such as 'isSolvable()'. [UnusedPrivateMethod]
Solver.java:6: Can you replace the instance (or static) variable 'nodeMinPQ' with a local variable? [SingularField]
Solver.java:6: The private instance (or static) variable 'nodeMinPQ' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:7: The private instance (or static) variable 'goalNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:8: The private instance (or static) variable 'isSolvable' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:9: The private instance (or static) variable 'minMoves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:15: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:16: The private instance (or static) variable 'blocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:17: The private instance (or static) variable 'N' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:18: The private instance (or static) variable 'isSolvable' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:52: A getX() method which returns a boolean should be named isX() [BooleanGetMethodName]
Solver.java:90: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:91: The private instance (or static) variable 'prevNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:93: The private instance (or static) variable 'priority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:158: The private instance (or static) variable 'solution' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 17 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:8:17: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:159:64: Boolean expression can be simplified, e.g., use 'if (!isEmpty)' instead of 'if (isEmpty == false)'. [SimplifyBooleanExpression]
[WARN] Board.java:176:13: The local variable 'i_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:176:18: The local variable 'j_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:177:13: The local variable 'i_l' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:177:18: The local variable 'j_l' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:184:22: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:184:29: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:184:38: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:185:23: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:186:23: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Board.java:201:9: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Board.java:224:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:225:9: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [wrapper]
[WARN] Solver.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] Solver.java:17:21: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Solver.java:33:17: The local variable 'i_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:33:22: The local variable 'j_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:57:17: The local variable 'i_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:57:22: The local variable 'j_k' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:58:17: The local variable 'i_l' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:58:22: The local variable 'j_l' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:65:26: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:65:33: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:65:42: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:66:27: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:67:27: Do not use the letter 'l' as a variable name (or other identifier). It is hard to distinguish from the number '1'. [IllegalTokenText]
[WARN] Solver.java:82:13: Conditional logic can be removed. [SimplifyBooleanReturn]
[WARN] Solver.java:169:63: Boolean expression can be simplified, e.g., use 'if (!isEmpty)' instead of 'if (isEmpty == false)'. [SimplifyBooleanExpression]
[WARN] Solver.java:199:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:200:9: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [wrapper]
Checkstyle ends with 0 errors and 31 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:6:1: Defining a nested class in this program suggests poor design. [DescendantToken]
[WARN] Board.java:124:36: Using interface inheritance suggests poor design in this program. For example, 'Board' should be neither 'Comparable' nor 'Iterable'. [Design]
[WARN] Board.java:159:24: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
[WARN] Board.java:161:22: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
[WARN] Board.java:164:36: Using interface inheritance suggests poor design in this program. For example, 'Board' should be neither 'Comparable' nor 'Iterable'. [Design]
[WARN] Board.java:165:32: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:29:53: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] Solver.java:36:39: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] Solver.java:40:45: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] Solver.java:169:24: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
[WARN] Solver.java:171:22: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
[WARN] Solver.java:175:32: Do not create your own 'Iterable' or 'Iterator' classes. To return an 'Iterable<Board>', simply create a 'Stack<Board>' or 'Queue<Board>', add the boards to the stack/queue, and return the stack/queue. [Design]
Checkstyle ends with 0 errors and 6 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           144                  128
=> passed     3           208                  192
=> passed     4           256                  240
=> passed     8           576                  560
=> passed    12          1024                 1008
=> passed    16          1600                 1584
=> passed    20          2304                 2288
=> passed    37          6872                 6856
=> passed    72         23104                23088
=> passed   120         61504                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    - student solution() does not return null

  * puzzle2x2-unsolvable2.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable1.txt
    - student solution() does not return null

  * puzzle3x3-unsolvable2.txt
    - student solution() does not return null

  * puzzle4x4-unsolvable.txt
    - student solution() does not return null

==> FAILED

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
    - throws wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 23/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> FAILED  puzzle10.txt      10    12024   (1.5x)
=> FAILED  puzzle15.txt      15    15120   (1.5x)
=> FAILED  puzzle20.txt      20   107304  (21.3x)
=> FAILED  puzzle25.txt      25   773320 (124.1x)
=> FAILED  puzzle30.txt      30  3245032 (437.3x)
=> FAILED  puzzle35.txt      35  46397424 (5e+03x)
==> 0/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      12024               17               16         
=> passed  puzzle15.txt      15120               26               25         
=> passed  puzzle20.txt     107304              290              289         
=> passed  puzzle25.txt     773320             2091             2090         
=> passed  puzzle30.txt    3245032             8596             8595         
=> passed  puzzle35.txt   46397424           135154           135153         
==> 6/6 tests passed


Total: 6/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02 
=> passed  puzzle22.txt      22    3     0.00 
=> passed  puzzle21.txt      21    3     0.00 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.01 
=> passed  puzzle30.txt      30    3     0.02 
=> passed  puzzle31.txt      31    3     0.02 
=> passed  puzzle39.txt      39    4     0.03 
=> passed  puzzle41.txt      41    5     0.06 
=> passed  puzzle34.txt      34    4     0.07 
=> passed  puzzle37.txt      37    4     0.07 
=> passed  puzzle44.txt      44    5     0.15 
=> passed  puzzle32.txt      32    4     0.21 
=> passed  puzzle35.txt      35    4     0.14 
=> passed  puzzle33.txt      33    4     0.16 
=> passed  puzzle43.txt      43    4     0.28 
=> passed  puzzle46.txt      46    4     0.33 
=> passed  puzzle40.txt      40    4     0.48 
=> passed  puzzle36.txt      36    4     0.57 
=> passed  puzzle45.txt      45    4     0.62 
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt        716              427         
=> passed  puzzle22.txt       1738             1036         
=> passed  puzzle21.txt       1767             1041         
=> passed  puzzle23.txt       2654             1575         
=> passed  puzzle24.txt       2713             1630         
=> passed  puzzle25.txt       5142             3052         
=> passed  puzzle27.txt       5603             3371         
=> passed  puzzle29.txt       5757             3539         
=> passed  puzzle26.txt       5917             3550         
=> passed  puzzle28.txt      13496             8116         
=> passed  puzzle30.txt      21624            13029         
=> passed  puzzle31.txt      22840            13903         
=> passed  puzzle39.txt      35634            17523         
=> passed  puzzle41.txt      58354            25005         
=> passed  puzzle34.txt      75654            36580         
=> passed  puzzle37.txt      83518            40043         
=> passed  puzzle44.txt     139602            61583         
=> passed  puzzle32.txt     259712           124748         
=> passed  puzzle35.txt     263802           128649         
=> passed  puzzle33.txt     312942           149442         
=> passed  puzzle43.txt     529360           254417         
=> passed  puzzle46.txt     525924           258371         
=> passed  puzzle40.txt     553787           270734         
=> passed  puzzle36.txt    1038848           505743         
=> passed  puzzle45.txt    1218876           594877         
==> 25/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> FAILED  puzzle20.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle22.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle21.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle23.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle24.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle25.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle27.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle29.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle26.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle28.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle30.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle31.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle39.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle41.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle34.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle37.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle44.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle32.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle35.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle33.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle43.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle46.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle40.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle36.txt            0            1 (Infinityx)   0         
=> FAILED  puzzle45.txt            0            1 (Infinityx)   0         
==> 0/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1141                1136                1143         
=> passed  puzzle22.txt       2772                2769                2774         
=> passed  puzzle21.txt       2806                2802                2808         
=> passed  puzzle23.txt       4227                4223                4229         
=> passed  puzzle24.txt       4341                4336                4343         
=> passed  puzzle25.txt       8192                8188                8194         
=> passed  puzzle27.txt       8972                8968                8974         
=> passed  puzzle29.txt       9294                9290                9296         
=> passed  puzzle26.txt       9465                9462                9467         
=> passed  puzzle28.txt      21610               21605               21612         
=> passed  puzzle30.txt      34651               34648               34653         
=> passed  puzzle31.txt      36741               36737               36743         
=> passed  puzzle39.txt      53155               53151               53157         
=> passed  puzzle41.txt      83357               83352               83359         
=> passed  puzzle34.txt     112232              112229              112234         
=> passed  puzzle37.txt     123559              123555              123561         
=> passed  puzzle44.txt     201183              201178              201185         
=> passed  puzzle32.txt     384458              384453              384460         
=> passed  puzzle35.txt     392449              392444              392451         
=> passed  puzzle33.txt     462382              462378              462384         
=> passed  puzzle43.txt     783775              783771              783777         
=> passed  puzzle46.txt     784293              784289              784295         
=> passed  puzzle40.txt     824519              824516              824521         
=> passed  puzzle36.txt    1544589             1544584             1544591         
=> passed  puzzle45.txt    1813751             1813747             1813753         
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       1141                1136                1143         
=> passed  puzzle22.txt       2772                2769                2774         
=> passed  puzzle21.txt       2806                2802                2808         
=> passed  puzzle23.txt       4227                4223                4229         
=> passed  puzzle24.txt       4341                4336                4343         
=> passed  puzzle25.txt       8192                8188                8194         
=> passed  puzzle27.txt       8972                8968                8974         
=> passed  puzzle29.txt       9294                9290                9296         
=> passed  puzzle26.txt       9465                9462                9467         
=> passed  puzzle28.txt      21610               21605               21612         
=> passed  puzzle30.txt      34651               34648               34653         
=> passed  puzzle31.txt      36741               36737               36743         
=> passed  puzzle39.txt      53155               53151               53157         
=> passed  puzzle41.txt      83357               83352               83359         
=> passed  puzzle34.txt     112232              112229              112234         
=> passed  puzzle37.txt     123559              123555              123561         
=> passed  puzzle44.txt     201183              201178              201185         
=> passed  puzzle32.txt     384458              384453              384460         
=> passed  puzzle35.txt     392449              392444              392451         
=> passed  puzzle33.txt     462382              462378              462384         
=> passed  puzzle43.txt     783775              783771              783777         
=> passed  puzzle46.txt     784293              784289              784295         
=> passed  puzzle40.txt     824519              824516              824521         
=> passed  puzzle36.txt    1544589             1544584             1544591         
=> passed  puzzle45.txt    1813751             1813747             1813753         
==> 25/25 tests passed


Total: 100/125 tests passed!
