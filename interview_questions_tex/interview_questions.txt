1. Undirected Graphs

1. Question 1
Nonrecursive depth-first search. Implement depth-first search in an undirected graph without using recursion.

My answer:
Suppose  G is an undirected graph, v is a given vertex of G.
Procedure non_recursive_dfs (G, v):
1) Create stack q, push v into q, mark v as visited
2) while q is not empty do: 
2.1) pop a vertex w (the top of q) 
2.2) iterate through all vertices {u} which are adjacent to w, if u has not been visited yet, mark it as visited and push it into q
This is nonrecursive equivalent of depth-first search algorithm.

Hint 1: use an explicit stack.
Hint 2: it is trickier than it may appear at first; you can simply replace a queue with a stack in breadth-first search.

2. Question 2
Diameter and center of a tree. Given a connected graph with no cycles
Diameter: design a linear-time algorithm to find the longest simple path in the graph.
Center: design a linear-time algorithm to find a vertex such that its maximum distance from any other vertex is minimized.

My answer: These problems are np-complete for a connected acyclic graph and cannot be solved in linear time. (it is wrong!)

Hint (diameter): to compute the diameter, pick a vertex ss; run BFS from ss; then run BFS again from the vertex that is furthest from ss.
Hint (center): consider vertices on the longest path.

https://www.geeksforgeeks.org/longest-path-undirected-tree/

3. Question 3
Euler cycle. An Euler cycle in a graph is a cycle (not necessarily simple) that uses every edge in the graph exactly one.
Show that a connected graph has an Euler cycle if and only if every vertex has even degree.
Design a linear-time algorithm to determine whether a graph has an Euler cycle, and if so, find one.

My answer:
Th 1.  A connected graph has an Euler cycle if and only if every vertex has even degree.
a) => : let`s suppose a given connected graph has an Euler cycle and it has a vertex v which has an odd degree. if v is NOT a starting vertex of Euler cycle, each time we visit and leave it, while going through the cycle, the number of nonvisited edges, which are adjacent to v, decreases by 2. it leads to a contradiction, because deg v is odd. if v is a starting vertex of Euler cycle, it is also an ending point of Euler cycle, we decrease its degree by 1 at the beggining and in the end, so its degree  can`t be odd too.
b) <= : let`s prove by induction. for n = |V| = 0 it is obvious statement. let`s suppose it is true for any graph so that |V| < n. suppose a given connected graph G has only even degrees. let`s suppose any vertex v in G and any cycle C1 which is started in v. continue to construct C1 so that it will contain every edge which is adjacent to v. if it is eulerian, the proof is finished. let`s suppose it is not eulerian. C1 has an even number of edges which are adjacent of vertexes in C1 by construction, so every vertex graph G1 = G \ C1 will have even degree, so all connected components of G1 have eulerian cycles by induction assumption. their union with C1 will give as an eulerian cycle of G.

Algorithm:
1) Check that every vertex degree in G is even
2) Choose any vertex v of even degree (>0)
3) Create stack 'q' and stack 'cycle'
4) Push v into q
5) While q is not empty do:
* pop s -- the top of q
* check every adjacent edge of s which has not been used before, mark each nonused edge [s, w] as used, push s into q again and check in this manner all adjacent edges of w. if all adjacent edges of s were used, push s into 'cycle' and continue while loop
6) in the end 'cycle' will contain an eulerian cycle
This algorithm has a O(V + E) complexity.

Hint: use depth-first search and piece together the cycles you discover.

http://neerc.ifmo.ru/wiki/index.php?title=%D0%AD%D0%B9%D0%BB%D0%B5%D1%80%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D1%8C_%D0%B3%D1%80%D0%B0%D1%84%D0%BE%D0%B2
