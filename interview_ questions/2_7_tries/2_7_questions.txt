7. Tries

7.1 Prefix free codes.

In data compression, a set of binary strings is if no string is a prefix of another. For example, {01,10,0010,1111} is prefix free, but {01,10,0010,10100} is not because 10 is a prefix of 10100. Design an efficient algorithm to determine if a set of binary strings is prefix-free. The running time of your algorithm should be proportional the number of bits in all of the binary stings.

Construct 2-trie from input the set of strings for alphabet {0, 1}. If all word paths in the trie finishes in leaves, the input set is prefix free. Otherwise, it is not. The running time complexity is O(N), where N is the number of bits in all of the binary stings. It's also possible to solve this problem using radix sorting or a ternary search trie.

7.2 Boggle

Boggle is a word game played on an 44-by-44 grid of tiles, where each tile contains one letter in the alphabet. The goal is to find all words in the dictionary that can be made by following a path of adjacent tiles (with no tile repeated), where two tiles are adjacent if they are horizontal, vertical, or diagonal neighbors.

Boggle solver should use DFS-style algorithm to find all valid words in 4-by-4 playing board. Dictionary should be implemented as 26-trie. The path on the board should be continued only if (dictionarySet.hasKeysWithPrefix(path) == true). For more details look the implementation of Assignment 9.

7.3 Suffix trees.

Learn about and implement, the ultimate string searching data structure.

Suffix tree could be constructed in the same way as R-trie. Iterate through all suffixes of string S in O(n), where size (s) == n, and insert them in data structure one by one. You need to create the nodes only when branching happens by breaking the existing edge in the middle. Only the pair (start, length) of the substring of text corresponding to the edge label must be stored instead of storing this substring itself. Suffix tree is usually called memory-optimized trie. This construction algorithm`s running time is proporional to O(N^2) in the worst case, O(N) implementation is possible, but much more tricky.

